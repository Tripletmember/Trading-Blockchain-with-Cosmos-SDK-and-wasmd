// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: confio/poe/v1beta1/validator.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "github.com/tendermint/tendermint/proto/tendermint/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BondStatus is the status of a validator.
type BondStatus int32

const (
	// UNSPECIFIED defines an invalid validator status.
	Unspecified BondStatus = 0
	// UNBONDED defines a validator that is not bonded.
	Unbonded BondStatus = 1
	// UNBONDING defines a validator that is unbonding.
	Unbonding BondStatus = 2
	// BONDED defines a validator that is bonded.
	Bonded BondStatus = 3
)

var BondStatus_name = map[int32]string{
	0: "BOND_STATUS_UNSPECIFIED",
	1: "BOND_STATUS_UNBONDED",
	2: "BOND_STATUS_UNBONDING",
	3: "BOND_STATUS_BONDED",
}

var BondStatus_value = map[string]int32{
	"BOND_STATUS_UNSPECIFIED": 0,
	"BOND_STATUS_UNBONDED":    1,
	"BOND_STATUS_UNBONDING":   2,
	"BOND_STATUS_BONDED":      3,
}

func (x BondStatus) String() string {
	return proto.EnumName(BondStatus_name, int32(x))
}

func (BondStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_497af24a595ed87a, []int{0}
}

// Validator defines a validator, together with the total amount of the
// Validator's bond shares and their exchange rate to coins. Slashing results in
// a decrease in the exchange rate, allowing correct calculation of future
// undelegations without iterating over delegators. When coins are delegated to
// this validator, the validator is credited with a delegation whose number of
// bond shares is based on the amount of coins delegated divided by the current
// exchange rate. Voting power can be calculated as total bonded shares
// multiplied by exchange rate.
type Validator struct {
	// operator_address defines the address of the validator's operator; bech
	// encoded in JSON.
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
	// consensus_pubkey is the consensus public key of the validator, as a
	// Protobuf Any.
	ConsensusPubkey *types.Any `protobuf:"bytes,2,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty" yaml:"consensus_pubkey"`
	// jailed defined whether the validator has been jailed from bonded status or
	// not.
	Jailed bool `protobuf:"varint,3,opt,name=jailed,proto3" json:"jailed,omitempty"`
	// status is the validator status (bonded/unbonding/unbonded).
	Status BondStatus `protobuf:"varint,4,opt,name=status,proto3,enum=confio.poe.v1beta1.BondStatus" json:"status,omitempty"`
	// tokens define the delegated tokens (incl. self-delegation).
	Tokens github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=tokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tokens"`
	// description defines the description terms for the validator.
	Description types1.Description `protobuf:"bytes,7,opt,name=description,proto3" json:"description"`
	// unbonding_height defines, if unbonding, the height at which this validator
	// has begun unbonding.
	UnbondingHeight int64 `protobuf:"varint,8,opt,name=unbonding_height,json=unbondingHeight,proto3" json:"unbonding_height,omitempty" yaml:"unbonding_height"`
	// unbonding_time defines, if unbonding, the min time for the validator to
	// complete unbonding.
	UnbondingTime time.Time `protobuf:"bytes,9,opt,name=unbonding_time,json=unbondingTime,proto3,stdtime" json:"unbonding_time" yaml:"unbonding_time"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_497af24a595ed87a, []int{0}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("confio.poe.v1beta1.BondStatus", BondStatus_name, BondStatus_value)
	proto.RegisterType((*Validator)(nil), "confio.poe.v1beta1.Validator")
}

func init() {
	proto.RegisterFile("confio/poe/v1beta1/validator.proto", fileDescriptor_497af24a595ed87a)
}

var fileDescriptor_497af24a595ed87a = []byte{
	// 703 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x94, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0xc7, 0x6d, 0xc8, 0x0d, 0xc9, 0x04, 0x88, 0x65, 0x85, 0x8b, 0xaf, 0xef, 0x95, 0xed, 0xeb,
	0x8b, 0x50, 0x74, 0x55, 0x6c, 0x01, 0x52, 0x17, 0x2c, 0x2a, 0xe1, 0x06, 0xda, 0x80, 0x44, 0x91,
	0x43, 0xba, 0xe8, 0x26, 0xf2, 0xc7, 0x60, 0xdc, 0x24, 0x33, 0x96, 0x67, 0x8c, 0x9a, 0x37, 0x40,
	0x59, 0xf1, 0x02, 0x91, 0x90, 0xfa, 0x0a, 0x55, 0x9f, 0x01, 0x75, 0xc5, 0xb2, 0xea, 0x22, 0xad,
	0x60, 0xd3, 0x35, 0xab, 0x2e, 0x2b, 0x7f, 0x25, 0x10, 0x36, 0x89, 0xcf, 0x39, 0xbf, 0x73, 0xe6,
	0xcc, 0xff, 0x1c, 0x0d, 0x50, 0x1d, 0x8c, 0x4e, 0x7d, 0xac, 0x07, 0x18, 0xea, 0xe7, 0x9b, 0x36,
	0xa4, 0xd6, 0xa6, 0x7e, 0x6e, 0xf5, 0x7c, 0xd7, 0xa2, 0x38, 0xd4, 0x82, 0x10, 0x53, 0xcc, 0xf3,
	0x29, 0xa3, 0x05, 0x18, 0x6a, 0x19, 0x23, 0xd6, 0x3c, 0xec, 0xe1, 0x24, 0xac, 0xc7, 0x5f, 0x29,
	0x29, 0xfe, 0xe5, 0x61, 0xec, 0xf5, 0xa0, 0x9e, 0x58, 0x76, 0x74, 0xaa, 0x5b, 0x68, 0x90, 0x85,
	0xa4, 0xd9, 0x90, 0x1b, 0x85, 0x16, 0xf5, 0x31, 0xca, 0xe2, 0xf2, 0x6c, 0x9c, 0xfa, 0x7d, 0x48,
	0xa8, 0xd5, 0x0f, 0xf2, 0xda, 0x0e, 0x26, 0x7d, 0x4c, 0x3a, 0xe9, 0xa1, 0xa9, 0x91, 0xd7, 0x4e,
	0x2d, 0xdd, 0xb6, 0xc8, 0xf4, 0x16, 0x0e, 0xf6, 0xf3, 0xda, 0x6b, 0x59, 0x9c, 0x50, 0xab, 0xeb,
	0x23, 0x6f, 0x82, 0x64, 0x76, 0x46, 0xfd, 0x43, 0x21, 0x72, 0x61, 0xd8, 0xf7, 0x11, 0xd5, 0xe9,
	0x20, 0x80, 0x24, 0xfd, 0x4d, 0xa3, 0xea, 0xaf, 0x02, 0x28, 0xbf, 0xcd, 0x85, 0xe1, 0xf7, 0x01,
	0x87, 0x03, 0x18, 0xc6, 0xdf, 0x1d, 0xcb, 0x75, 0x43, 0x48, 0x88, 0xc0, 0x2a, 0x6c, 0xbd, 0x6c,
	0xfc, 0x7d, 0x3f, 0x96, 0x57, 0x07, 0x56, 0xbf, 0xb7, 0xa3, 0xce, 0x12, 0xaa, 0x59, 0xcd, 0x5d,
	0xbb, 0xa9, 0x87, 0xa7, 0x80, 0x73, 0x30, 0x22, 0x10, 0x91, 0x88, 0x74, 0x82, 0xc8, 0xee, 0xc2,
	0x81, 0x30, 0xa7, 0xb0, 0xf5, 0xca, 0x56, 0x4d, 0x4b, 0x05, 0xd1, 0x72, 0x41, 0xb4, 0x5d, 0x34,
	0x30, 0xb6, 0xa7, 0xd5, 0x67, 0xf3, 0xd4, 0x2f, 0x9f, 0x36, 0x6a, 0x99, 0x2c, 0x4e, 0x38, 0x08,
	0x28, 0xd6, 0x8e, 0x23, 0xfb, 0x10, 0x0e, 0xcc, 0xea, 0x04, 0x3d, 0x4e, 0x48, 0xfe, 0x4f, 0x50,
	0x7c, 0x6f, 0xf9, 0x3d, 0xe8, 0x0a, 0xf3, 0x0a, 0x5b, 0x2f, 0x99, 0x99, 0xc5, 0x3f, 0x07, 0x45,
	0x42, 0x2d, 0x1a, 0x11, 0xa1, 0xa0, 0xb0, 0xf5, 0xe5, 0x2d, 0x49, 0x7b, 0x3a, 0x79, 0xcd, 0xc0,
	0xc8, 0x6d, 0x25, 0x94, 0x99, 0xd1, 0xfc, 0x3e, 0x28, 0x52, 0xdc, 0x85, 0x88, 0x08, 0x7f, 0x24,
	0x1a, 0x68, 0xd7, 0x63, 0x99, 0xf9, 0x36, 0x96, 0xd7, 0x3d, 0x9f, 0x9e, 0x45, 0xb6, 0xe6, 0xe0,
	0x7e, 0x36, 0xb0, 0xec, 0x6f, 0x83, 0xb8, 0xdd, 0x4c, 0xdd, 0x26, 0xa2, 0x66, 0x96, 0xcd, 0x1f,
	0x82, 0x8a, 0x0b, 0x89, 0x13, 0xfa, 0x41, 0xbc, 0x18, 0xc2, 0x42, 0x22, 0xc4, 0x7f, 0x5a, 0x76,
	0xa9, 0x7c, 0x5a, 0x79, 0x23, 0x8d, 0x29, 0x6a, 0x14, 0xe2, 0x13, 0xcd, 0x87, 0xd9, 0xf1, 0x88,
	0x22, 0x64, 0x63, 0xe4, 0xfa, 0xc8, 0xeb, 0x9c, 0x41, 0xdf, 0x3b, 0xa3, 0x42, 0x49, 0x61, 0xeb,
	0xf3, 0x0f, 0x47, 0x34, 0x4b, 0xa8, 0x66, 0x75, 0xe2, 0x7a, 0x9d, 0x78, 0x78, 0x17, 0x2c, 0x4f,
	0xa9, 0x78, 0x29, 0x85, 0x72, 0xd2, 0x97, 0xf8, 0x64, 0x40, 0x27, 0xf9, 0xc6, 0x1a, 0xff, 0xc6,
	0xed, 0xdc, 0x8f, 0xe5, 0x95, 0xd9, 0x53, 0xe2, 0x7c, 0xf5, 0xf2, 0xbb, 0xcc, 0x9a, 0x4b, 0x13,
	0x67, 0x9c, 0xb6, 0x53, 0xba, 0xb8, 0x92, 0x99, 0x9f, 0x57, 0x32, 0x73, 0x50, 0x28, 0x15, 0xb9,
	0x85, 0x83, 0x42, 0x09, 0x70, 0x95, 0x83, 0x42, 0xa9, 0xc2, 0x2d, 0xfe, 0xff, 0x99, 0x05, 0x60,
	0xaa, 0x3a, 0xff, 0x0c, 0xac, 0x1a, 0x6f, 0x8e, 0x1a, 0x9d, 0xd6, 0xc9, 0xee, 0x49, 0xbb, 0xd5,
	0x69, 0x1f, 0xb5, 0x8e, 0xf7, 0x5e, 0x36, 0xf7, 0x9b, 0x7b, 0x0d, 0x8e, 0x11, 0xab, 0xc3, 0x91,
	0x52, 0x69, 0x23, 0x12, 0x40, 0xc7, 0x3f, 0xf5, 0xa1, 0xcb, 0xaf, 0x83, 0xda, 0x63, 0x3a, 0xb6,
	0xf6, 0x1a, 0x1c, 0x2b, 0x2e, 0x0e, 0x47, 0x4a, 0xa9, 0x9d, 0x74, 0x01, 0x5d, 0xbe, 0x0e, 0x56,
	0x9e, 0x72, 0xcd, 0xa3, 0x57, 0xdc, 0x9c, 0xb8, 0x34, 0x1c, 0x29, 0xe5, 0x76, 0xde, 0x2e, 0xaf,
	0x02, 0xfe, 0x21, 0x99, 0xd5, 0x9b, 0x17, 0xc1, 0x70, 0xa4, 0x14, 0x8d, 0xa4, 0x9a, 0x58, 0xb8,
	0xf8, 0x28, 0x31, 0xc6, 0x8b, 0xeb, 0x5b, 0x89, 0xbd, 0xb9, 0x95, 0xd8, 0x1f, 0xb7, 0x12, 0x7b,
	0x79, 0x27, 0x31, 0x37, 0x77, 0x12, 0xf3, 0xf5, 0x4e, 0x62, 0xde, 0xad, 0x3d, 0xda, 0x8c, 0xe4,
	0x05, 0xa2, 0x5e, 0x68, 0xb9, 0x50, 0xff, 0x90, 0x3c, 0x45, 0xc9, 0x6e, 0xd8, 0xc5, 0x44, 0xda,
	0xed, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x11, 0xa5, 0x33, 0x54, 0xa5, 0x04, 0x00, 0x00,
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UnbondingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UnbondingTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintValidator(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x4a
	if m.UnbondingHeight != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.UnbondingHeight))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.Tokens.Size()
		i -= size
		if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Status != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ConsensusPubkey != nil {
		{
			size, err := m.ConsensusPubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidator(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.ConsensusPubkey != nil {
		l = m.ConsensusPubkey.Size()
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.Jailed {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovValidator(uint64(m.Status))
	}
	l = m.Tokens.Size()
	n += 1 + l + sovValidator(uint64(l))
	l = m.Description.Size()
	n += 1 + l + sovValidator(uint64(l))
	if m.UnbondingHeight != 0 {
		n += 1 + sovValidator(uint64(m.UnbondingHeight))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UnbondingTime)
	n += 1 + l + sovValidator(uint64(l))
	return n
}

func sovValidator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidator(x uint64) (n int) {
	return sovValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusPubkey == nil {
				m.ConsensusPubkey = &types.Any{}
			}
			if err := m.ConsensusPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BondStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingHeight", wireType)
			}
			m.UnbondingHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UnbondingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidator = fmt.Errorf("proto: unexpected end of group")
)
